ref: "v1.3.0"
sha: "5ea2d011369bf371d2431871bd178d6893766392"
readme: "# Bazel rules for TypeScript\n\nThis is the canonical ruleset for using Bazel for TypeScript, based on\n<https://github.com/aspect-build/rules_js>, and recommended for all new projects.\n\nThis is a high-performance alternative to the `@bazel/typescript` npm package from rules_nodejs.\nThe `ts_project` rule here is identical to the one in rules_nodejs, making it easy to migrate.\nSince rules_js always runs tools from the bazel-out tree, rules_ts naturally fixes most usability bugs with rules_nodejs:\n\n-   Freely mix generated `*.ts` and `tsconfig.json` files in the bazel-out tree with source files\n-   Fixes the need for any `rootDirs` settings in `tsconfig.json` as reported in https://github.com/microsoft/TypeScript/issues/37378\n-   \"worker mode\" for `ts_project` now shares workers across all targets, rather than requiring one worker pool per target\n\nrules_ts is just a part of what Aspect provides:\n\n-   _Need help?_ This ruleset has support provided by https://aspect.dev.\n-   See our other Bazel rules, especially those built for rules_js, linked from <https://github.com/aspect-build>\n\nKnown issues:\n\n-   Does not work with `--worker_sandboxing`. See https://github.com/aspect-build/rules_ts/issues/127#issuecomment-1312041592\n-   Workers are disabled and not currently supported on Windows hosts. See https://github.com/aspect-build/rules_ts/issues/228.\n\n## Installation\n\nFrom the release you wish to use:\n<https://github.com/aspect-build/rules_ts/releases>\ncopy the WORKSPACE snippet into your `WORKSPACE` file.\n\n## Examples\n\nThere are a number of examples in [the examples/ folder](https://github.com/aspect-build/rules_ts/tree/main/examples).\n\nIf you'd like an example added, you can file a [Feature Request](https://github.com/aspect-build/rules_ts/issues/new/choose).\n\n## Usage\n\nSee the API documentation in [the docs/ folder](https://github.com/aspect-build/rules_ts/tree/main/docs).\n\n### From a BUILD file\n\nThe most common use is with the [`ts_project` macro](./docs/rules.md#ts_project) which invokes the\n[`tsc` CLI](https://www.typescriptlang.org/docs/handbook/compiler-options.html) to transform\nsource files like `.ts` files into outputs such as `.js` and `.d.ts` files.\n\nWe encourage you to read about the `transpiler` property which lets you use a faster tool like\nBabel or SWC to produce the `.js` files, so you don't have to wait for type-checking in your fast\ndevelopment loop.\n\n### In a macro\n\nMany organizations set default values, so it's common to write a [macro] to wrap `ts_project`, then\nensure that your developers load your macro rather than loading from `@aspect_rules_ts` directly.\n\n[macro]: https://bazel.build/extending/macros\n\n### BUILD file generation\n\nAspect provides an alpha preview of our TypeScript BUILD file generator as part of the\n[Aspect CLI](https://aspect.build/cli). Run `aspect configure` to create or update BUILD.bazel files\nas you edit TypeScript sources.\n\n### Advanced: custom rules\n\nIf you know how to write Bazel rules, you might find that `ts_project` doesn't do what you want.\n\nOne way to customize it is to peel off one layer of indirection, by calling the `ts_project_rule`\ndirectly. This bypasses our default setting logic, and also the validation program which checks that\nts_project attributes are well-formed.\n\nYou can also write a custom rule from scratch. We expose helper functions from /ts/private in this\nrepo. Be aware that these are not a public API, so you may have to account for breaking changes\nwhich aren't subject to our usual semver policy.\n"
release: {
  title: "v1.3.0"
  description: "⚠️ This release requires a minimum rules_js version of [v1.19.0](https://github.com/aspect-build/rules_js/releases/tag/v1.19.0).\r\n\r\n## Using [Bzlmod] with Bazel 6:\r\n\r\nAdd to your `MODULE.bazel` file:\r\n\r\n```starlark\r\nbazel_dep(name = \"aspect_rules_ts\", version = \"1.3.0\")\r\n\r\nrules_ts_ext = use_extension(\r\n    \"@aspect_rules_ts//ts:extensions.bzl\",\r\n    \"ext\",\r\n    dev_dependency = True,\r\n)\r\n\r\nrules_ts_ext.deps()\r\n\r\nuse_repo(rules_ts_ext, \"npm_typescript\")\r\n```\r\n\r\n[Bzlmod]: https://bazel.build/build/bzlmod\r\n\r\n## Using WORKSPACE\r\n\r\nPaste this snippet into your `WORKSPACE` file:\r\n\r\n```starlark\r\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\r\nhttp_archive(\r\n    name = \"aspect_rules_ts\",\r\n    sha256 = \"db77d904284d21121ae63dbaaadfd8c75ff6d21ad229f92038b415c1ad5019cc\",\r\n    strip_prefix = \"rules_ts-1.3.0\",\r\n    url = \"https://github.com/aspect-build/rules_ts/releases/download/v1.3.0/rules_ts-v1.3.0.tar.gz\",\r\n)\r\n\r\n##################\r\n# rules_ts setup #\r\n##################\r\n# Fetches the rules_ts dependencies.\r\n# If you want to have a different version of some dependency,\r\n# you should fetch it *before* calling this.\r\n# Alternatively, you can skip calling this function, so long as you've\r\n# already fetched all the dependencies.\r\nload(\"@aspect_rules_ts//ts:repositories.bzl\", \"rules_ts_dependencies\")\r\n\r\nrules_ts_dependencies(\r\n    # This keeps the TypeScript version in-sync with the editor, which is typically best.\r\n    ts_version_from = \"//:package.json\",\r\n\r\n    # Alternatively, you could pick a specific version, or use\r\n    # load(\"@aspect_rules_ts//ts:repositories.bzl\", \"LATEST_VERSION\")\r\n    # ts_version = LATEST_VERSION\r\n)\r\n\r\n# Fetch and register node, if you haven't already\r\nload(\"@rules_nodejs//nodejs:repositories.bzl\", \"DEFAULT_NODE_VERSION\", \"nodejs_register_toolchains\")\r\n\r\nnodejs_register_toolchains(\r\n    name = \"node\",\r\n    node_version = DEFAULT_NODE_VERSION,\r\n)\r\n\r\n# Register aspect_bazel_lib toolchains;\r\n# If you use npm_translate_lock or npm_import from aspect_rules_js you can omit this block.\r\nload(\"@aspect_bazel_lib//lib:repositories.bzl\", \"register_copy_directory_toolchains\", \"register_copy_to_directory_toolchains\")\r\n\r\nregister_copy_directory_toolchains()\r\n\r\nregister_copy_to_directory_toolchains()\r\n```\r\n\r\n\r\n## What's Changed\r\n* chore: update to rules_js 1.19.0 by @gregmagolan in https://github.com/aspect-build/rules_ts/pull/312\r\n* chore: remove non-existant pnpm workspaces in e2e/worker by @gregmagolan in https://github.com/aspect-build/rules_ts/pull/314\r\n* feat: propagate non-dev npm dependencies in ts_project deps to direct dependencies of downstream linked npm_package targets by @gregmagolan in https://github.com/aspect-build/rules_ts/pull/313\r\n* feat: add JsInfo provider to ts_config rule by @gregmagolan in https://github.com/aspect-build/rules_ts/pull/315\r\n* fix: include declarations in files of generated tsconfig by @gregmagolan in https://github.com/aspect-build/rules_ts/pull/316\r\n* fix: ts_project external workspace builds by @dgp1130 in https://github.com/aspect-build/rules_ts/pull/310\r\n\r\n## New Contributors\r\n* @dgp1130 made their first contribution in https://github.com/aspect-build/rules_ts/pull/310\r\n\r\n**Full Changelog**: https://github.com/aspect-build/rules_ts/compare/v1.2.4...v1.3.0"
  publish_time: {
    seconds: 1676160172
  }
  assets: {
    name: "rules_ts-v1.3.0.tar.gz"
    url: "https://github.com/aspect-build/rules_ts/releases/download/v1.3.0/rules_ts-v1.3.0.tar.gz"
  }
}
module_file: {
  name: "aspect_rules_ts"
  version: "0.0.0"
  compatibility_level: 1
  dependencies: {
    name: "bazel_skylib"
    version: "1.3.0"
  }
  dependencies: {
    name: "rules_nodejs"
    version: "5.5.3"
    dev_dependency: true
  }
  dependencies: {
    name: "aspect_rules_js"
    version: "1.19.0"
  }
  dependencies: {
    name: "aspect_bazel_lib"
    version: "1.24.2"
  }
}
