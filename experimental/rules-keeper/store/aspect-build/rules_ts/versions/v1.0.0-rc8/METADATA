ref: "v1.0.0-rc8"
sha: "b424e546e810d405b479eb92634ff95b6aa6644b"
readme: "# Bazel rules for TypeScript\n\nThis is the canonical ruleset for using Bazel for TypeScript, based on\n<https://github.com/aspect-build/rules_js>, and recommended for all new projects.\n\nThis is a high-performance alternative to the `@bazel/typescript` npm package from rules_nodejs.\nThe `ts_project` rule here is identical to the one in rules_nodejs, making it easy to migrate.\nSince rules_js always runs tools from the bazel-out tree, rules_ts naturally fixes most usability bugs with rules_nodejs:\n\n-   Freely mix generated `*.ts` and `tsconfig.json` files in the bazel-out tree with source files\n-   Fixes the need for any `rootDirs` settings in `tsconfig.json` as reported in https://github.com/microsoft/TypeScript/issues/37378\n-   \"worker mode\" for `ts_project` now shares workers across all targets, rather than requiring one worker pool per target\n\nrules_ts is just a part of what Aspect provides:\n\n-   _Need help?_ This ruleset has support provided by https://aspect.dev.\n-   See our other Bazel rules, especially those built for rules_js, linked from <https://github.com/aspect-build>\n\nKnown issues:\n\n-   Does not work with `--worker_sandboxing`. See https://github.com/aspect-build/rules_ts/issues/127#issuecomment-1312041592\n-   Workers are disabled and not currently supported on Windows hosts. See https://github.com/aspect-build/rules_ts/issues/228.\n\n## Installation\n\nFrom the release you wish to use:\n<https://github.com/aspect-build/rules_ts/releases>\ncopy the WORKSPACE snippet into your `WORKSPACE` file.\n\n## Examples\n\nThere are a number of examples in [the examples/ folder](./examples/).\n\nIf you'd like an example added, you can file a Feature Request.\n\n## Usage\n\nSee the API documentation in [the docs/ folder](./docs/).\n\n### From a BUILD file\n\nThe most common use is with the [`ts_project` macro](./docs/rules.md#ts_project) which invokes the\n[`tsc` CLI](https://www.typescriptlang.org/docs/handbook/compiler-options.html) to transform\nsource files like `.ts` files into outputs such as `.js` and `.d.ts` files.\n\nWe encourage you to read about the `transpiler` property which lets you use a faster tool like\nBabel or SWC to produce the `.js` files, so you don't have to wait for type-checking in your fast\ndevelopment loop.\n\n### In a macro\n\nMany organizations set default values, so it's common to write a [macro] to wrap `ts_project`, then\nensure that your developers load your macro rather than loading from `@aspect_rules_ts` directly.\n\n[macro]: https://bazel.build/extending/macros\n\n### BUILD file generation\n\nAspect provides an alpha preview of our TypeScript BUILD file generator as part of the\n[Aspect CLI](https://aspect.build/cli). Run `aspect configure` to create or update BUILD.bazel files\nas you edit TypeScript sources.\n\n### Advanced: custom rules\n\nIf you know how to write Bazel rules, you might find that `ts_project` doesn't do what you want.\n\nOne way to customize it is to peel off one layer of indirection, by calling the `ts_project_rule`\ndirectly. This bypasses our default setting logic, and also the validation program which checks that\nts_project attributes are well-formed.\n\nYou can also write a custom rule from scratch. We expose helper functions from /ts/private in this\nrepo. Be aware that these are not a public API, so you may have to account for breaking changes\nwhich aren't subject to our usual semver policy.\n"
release: {
  title: "v1.0.0-rc8"
  description: "## Using [Bzlmod] with Bazel 6:\n\nAdd to your `MODULE.bazel` file:\n\n```starlark\nbazel_dep(name = \"aspect_rules_ts\", version = \"1.0.0-rc8\")\n\nrules_ts_ext = use_extension(\n    \"@aspect_rules_ts//ts:extensions.bzl\",\n    \"ext\",\n    dev_dependency = True,\n)\n\nrules_ts_ext.deps()\n\nuse_repo(rules_ts_ext, \"npm_typescript\")\n\nuse_repo(rules_ts_ext, \"npm_google_protobuf\")\n\nuse_repo(rules_ts_ext, \"npm_at_bazel_worker\")\n```\n\n[Bzlmod]: https://bazel.build/build/bzlmod\n\n## Using WORKSPACE\n\nPaste this snippet into your `WORKSPACE` file:\n\n```starlark\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nhttp_archive(\n    name = \"aspect_rules_ts\",\n    sha256 = \"8993bfa4e4cae08a2c95df070197a8f3a77f8f186da3031344275254f61e936b\",\n    strip_prefix = \"rules_ts-1.0.0-rc8\",\n    url = \"https://github.com/aspect-build/rules_ts/archive/refs/tags/v1.0.0-rc8.tar.gz\",\n)\n\n##################\n# rules_ts setup #\n##################\n# Fetches the rules_ts dependencies.\n# If you want to have a different version of some dependency,\n# you should fetch it *before* calling this.\n# Alternatively, you can skip calling this function, so long as you've\n# already fetched all the dependencies.\nload(\"@aspect_rules_ts//ts:repositories.bzl\", \"LATEST_VERSION\", \"rules_ts_dependencies\")\n\nrules_ts_dependencies(ts_version = LATEST_VERSION)\n\n# Fetch and register node, if you haven't already\nload(\"@rules_nodejs//nodejs:repositories.bzl\", \"DEFAULT_NODE_VERSION\", \"nodejs_register_toolchains\")\n\nnodejs_register_toolchains(\n    name = \"node\",\n    node_version = DEFAULT_NODE_VERSION,\n)\n```\n\n\n## What's Changed\n* test: assert external tsconfig is usable with workers by @thesayyn in https://github.com/aspect-build/rules_ts/pull/239\n* fix: support non-file transpiler srcs by @jbedard in https://github.com/aspect-build/rules_ts/pull/236\n* chore: cleanup macro that was upstreamed by @alexeagle in https://github.com/aspect-build/rules_ts/pull/243\n* fix: disable workers on Windows due to #228 by @gregmagolan in https://github.com/aspect-build/rules_ts/pull/245\n\n\n**Full Changelog**: https://github.com/aspect-build/rules_ts/compare/v1.0.0-rc7...v1.0.0-rc8"
  preprelease: true
  publish_time: {
    seconds: 1668643484
  }
}
module_file: {
  name: "aspect_rules_ts"
  version: "0.0.0"
  compatibility_level: 1
  dependencies: {
    name: "bazel_skylib"
    version: "1.3.0"
  }
  dependencies: {
    name: "rules_nodejs"
    version: "5.5.3"
    dev_dependency: true
  }
  dependencies: {
    name: "aspect_rules_js"
    version: "1.6.3"
  }
  dependencies: {
    name: "aspect_bazel_lib"
    version: "1.15.0"
  }
}
